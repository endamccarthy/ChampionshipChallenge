# Generated by Django 3.0.7 on 2020-06-27 15:00

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gameplay.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Fixture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('sport', models.CharField(choices=[('H', 'Hurling'), ('F', 'Football')], max_length=100)),
                ('region', models.CharField(choices=[('C', 'Connacht'), ('L', 'Leinster'), ('M', 'Munster'), ('U', 'Ulster'), ('AH', 'All-Ireland')], max_length=100)),
                ('fixture_round', models.CharField(choices=[('1', 'First Round'), ('2', 'Second Round'), ('3', 'Third Round'), ('4', 'Fourth Round'), ('5', 'Fifth Round'), ('6', 'Sixth Round'), ('7', 'Seventh Round'), ('8', 'Eighth Round'), ('9', 'Ninth Round'), ('10', 'Tenth Round'), ('Q', 'Quarter Final'), ('S', 'Semi Final'), ('F', 'Final')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('region', models.CharField(choices=[('C', 'Connacht'), ('L', 'Leinster'), ('M', 'Munster'), ('U', 'Ulster'), ('AH', 'All-Ireland')], max_length=100)),
                ('sport', models.CharField(choices=[('H', 'Hurling'), ('F', 'Football')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TopScorer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(choices=[('C', 'Connacht'), ('L', 'Leinster'), ('M', 'Munster'), ('U', 'Ulster'), ('AH', 'All-Ireland')], max_length=100)),
                ('sport', models.CharField(choices=[('H', 'Hurling'), ('F', 'Football')], max_length=100)),
                ('goals', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='top_scorer', to='gameplay.Player')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals_open_play', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('goals_placed_balls', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('points_open_play', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('points_placed_balls', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='score_fixture', to='gameplay.Fixture')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player', to='gameplay.Player')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_A_goals', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('team_A_points', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('team_B_goals', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('team_B_points', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fixture', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='fixture', to='gameplay.Fixture')),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction', models.CharField(choices=[('A', 'Team A Win'), ('B', 'Team B Win'), ('D', 'Draw')], max_length=100, null=True)),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prediction_fixture', to='gameplay.Fixture')),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team', to='gameplay.Team'),
        ),
        migrations.AddField(
            model_name='fixture',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='location', to='gameplay.Team'),
        ),
        migrations.AddField(
            model_name='fixture',
            name='team_A',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='team_A', to='gameplay.Team'),
        ),
        migrations.AddField(
            model_name='fixture',
            name='team_B',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='team_B', to='gameplay.Team'),
        ),
        migrations.CreateModel(
            name='Finalist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='finalist_fixture', to='gameplay.Fixture')),
                ('team_A', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='finalist_team_A', to='gameplay.Team')),
                ('team_B', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='finalist_team_B', to='gameplay.Team')),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('points', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('paid', models.BooleanField(blank=True, default=False)),
                ('entry_number', models.IntegerField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('predictions', models.ManyToManyField(related_name='entry_predictions', to='gameplay.Prediction')),
                ('user', models.ForeignKey(on_delete=models.SET(gameplay.models.get_sentinel_user), related_name='entry_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.UniqueConstraint(fields=('player', 'fixture'), name='unique score'),
        ),
        migrations.AddConstraint(
            model_name='player',
            constraint=models.UniqueConstraint(fields=('first_name', 'last_name', 'team'), name='unique player'),
        ),
        migrations.AddConstraint(
            model_name='fixture',
            constraint=models.UniqueConstraint(fields=('team_A', 'team_B', 'datetime'), name='unique fixture'),
        ),
        migrations.AddConstraint(
            model_name='entry',
            constraint=models.UniqueConstraint(fields=('user', 'datetime'), name='unique entry'),
        ),
    ]
